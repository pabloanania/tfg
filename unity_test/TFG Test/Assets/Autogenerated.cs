
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;

public class Autogenerated : MonoBehaviour
{

    private IEnumerable<Disparo_Entity> allDisparo;
    private IEnumerable<Materia_Entity> allMateria;
    private IEnumerable<Personaje_Entity> allPersonaje;
    private IEnumerable<TextoFeedback_Entity> allTextoFeedback;
    private IEnumerable<GameMaster_Entity> allGameMaster;
    private IEnumerable<System_Entity> allSystem;
    private IEnumerable<Disparo_Entity> filteredDisparo;
    private IEnumerable<Materia_Entity> filteredMateria;
    private IEnumerable<Personaje_Entity> filteredPersonaje;
    private IEnumerable<TextoFeedback_Entity> filteredTextoFeedback;
    private IEnumerable<GameMaster_Entity> filteredGameMaster;
    private IEnumerable<System_Entity> filteredSystem;

    /* PREFABS */
    public GameObject DisparoPrefab;
    public GameObject MateriaPrefab;
    public GameObject PersonajePrefab;
    public GameObject TextoFeedbackPrefab;
    public GameObject GameMasterPrefab;
    public GameObject SystemPrefab;

    void Start()
    {
        /* EVENT START */
        NewEvent();
        InvokeRepeating("InvokeCallback0", 1f, 1f);

    }

    void Update()
    {
        /* EVENT START */
        NewEvent();
        if (true)
        {
            foreach (Disparo_Entity Disparo in filteredDisparo) { Disparo.Z = Disparo.Z + 0.1f; }
            foreach (Materia_Entity Materia in filteredMateria) { Materia.Z = Materia.Z - 0.1f; }
        }
        /* EVENT START */
        NewEvent();
        if (Input.GetKey("right"))
        {
            filteredPersonaje = filteredPersonaje.Where(e => e.X < 7).ToList();
            if (filteredPersonaje.Count() > 0)
            {
                foreach (Personaje_Entity Personaje in filteredPersonaje) { Personaje.X = Personaje.X + 0.1f; }
            }
        }
        /* EVENT START */
        NewEvent();
        if (Input.GetKey("left"))
        {
            filteredPersonaje = filteredPersonaje.Where(e => e.X > -7).ToList();
            if (filteredPersonaje.Count() > 0)
            {
                foreach (Personaje_Entity Personaje in filteredPersonaje) { Personaje.X = Personaje.X - 0.1f; }
            }
        }
        /* EVENT START */
        NewEvent();
        if (Input.GetKeyDown("space"))
        {
            foreach (System_Entity System in filteredSystem) { var aux = Instantiate(DisparoPrefab, new Vector3(filteredPersonaje.First().X, filteredPersonaje.First().Y, filteredPersonaje.First().Z + 1.0f), Quaternion.identity); aux.name = "Disparo_Entity"; }
        }
        /* EVENT START */
        NewEvent();
        filteredDisparo = filteredDisparo.Where(e => e.CollidesWith("Materia_Entity")).ToList();
        filteredMateria = filteredMateria.Where(e => e.CollidesWith("Disparo_Entity")).ToList();
        if (filteredDisparo.Count() > 0 && filteredMateria.Count() > 0)
        {
            foreach (Disparo_Entity Disparo in filteredDisparo) { Destroy(Disparo.gameObject); ClearCollisionData(Disparo); }
            foreach (Materia_Entity Materia in filteredMateria) { Materia.Calificacion = Materia.Calificacion + 1; }
        }
        /* EVENT START */
        NewEvent();
        filteredMateria = filteredMateria.Where(e => e.Calificacion < 4).ToList();
        if (filteredMateria.Count() > 0)
        {
            filteredMateria = filteredMateria.Where(e => e.Z < -10).ToList();
            if (filteredMateria.Count() > 0)
            {
                foreach (TextoFeedback_Entity TextoFeedback in filteredTextoFeedback) { TextoFeedback.GetComponent<UnityEngine.UI.Text>().text = "REPROBADO!!"; }
                foreach (Materia_Entity Materia in filteredMateria) { Destroy(Materia.gameObject); ClearCollisionData(Materia); }
                foreach (TextoFeedback_Entity TextoFeedback in filteredTextoFeedback) { TextoFeedback.TiempoMostrarse = 3; }
            }
        }
        /* EVENT START */
        NewEvent();
        filteredPersonaje = filteredPersonaje.Where(e => e.CollidesWith("Materia_Entity")).ToList();
        filteredMateria = filteredMateria.Where(e => e.CollidesWith("Personaje_Entity")).ToList();
        if (filteredPersonaje.Count() > 0 && filteredMateria.Count() > 0)
        {
            foreach (TextoFeedback_Entity TextoFeedback in filteredTextoFeedback) { TextoFeedback.GetComponent<UnityEngine.UI.Text>().text = "REPROBADO!!"; }
            foreach (Materia_Entity Materia in filteredMateria) { Destroy(Materia.gameObject); ClearCollisionData(Materia); }
            foreach (TextoFeedback_Entity TextoFeedback in filteredTextoFeedback) { TextoFeedback.TiempoMostrarse = 3; }
        }
        /* EVENT START */
        NewEvent();
        filteredMateria = filteredMateria.Where(e => e.Calificacion >= 4).ToList();
        if (filteredMateria.Count() > 0)
        {
            filteredMateria = filteredMateria.Where(e => e.Z < -10).ToList();
            if (filteredMateria.Count() > 0)
            {
                foreach (TextoFeedback_Entity TextoFeedback in filteredTextoFeedback) { TextoFeedback.GetComponent<UnityEngine.UI.Text>().text = "APROBADO CON " + filteredMateria.First().Calificacion + "!"; }
                foreach (Materia_Entity Materia in filteredMateria) { Destroy(Materia.gameObject); ClearCollisionData(Materia); }
                foreach (TextoFeedback_Entity TextoFeedback in filteredTextoFeedback) { TextoFeedback.TiempoMostrarse = 3; }
            }
        }
        /* EVENT START */
        NewEvent();
        filteredTextoFeedback = filteredTextoFeedback.Where(e => e.TiempoMostrarse <= 0).ToList();
        if (filteredTextoFeedback.Count() > 0)
        {
            foreach (TextoFeedback_Entity TextoFeedback in filteredTextoFeedback) { TextoFeedback.GetComponent<UnityEngine.UI.Text>().text = ""; }
        }
        /* EVENT START */
        NewEvent();
        filteredMateria = filteredMateria.Where(e => e.Calificacion > 10).ToList();
        if (filteredMateria.Count() > 0)
        {
            foreach (Materia_Entity Materia in filteredMateria) { Materia.Calificacion = 10; }
        }
        /* EVENT START */
        NewEvent();
        filteredGameMaster = filteredGameMaster.Where(e => e.TiempoCreacionMateria >= 10).ToList();
        if (filteredGameMaster.Count() > 0)
        {
            foreach (GameMaster_Entity GameMaster in filteredGameMaster) { GameMaster.TiempoCreacionMateria = 0; }
            foreach (System_Entity System in filteredSystem) { var aux = Instantiate(MateriaPrefab, new Vector3(Random.Range(-7, 7), 0, 40), Quaternion.identity); aux.name = "Materia_Entity"; }
        }

    }

    void FixedUpdate()
    {

    }

    /* EVENT INITIALIZATION */
    private void NewEvent()
    {
        allPersonaje = FindObjectsOfType<Personaje_Entity>().ToList();
        allMateria = FindObjectsOfType<Materia_Entity>().ToList();
        allDisparo = FindObjectsOfType<Disparo_Entity>().ToList();
        allTextoFeedback = FindObjectsOfType<TextoFeedback_Entity>().ToList();
        allGameMaster = FindObjectsOfType<GameMaster_Entity>().ToList();
        allSystem = FindObjectsOfType<System_Entity>().ToList();
        filteredPersonaje = allPersonaje;
        filteredDisparo = allDisparo;
        filteredMateria = allMateria;
        filteredTextoFeedback = allTextoFeedback;
        filteredGameMaster = allGameMaster;
        filteredSystem = allSystem;
    }

    /* CLEARS COLLISION DATA ON EACH ENTITY */
    private void ClearCollisionData(Entity entity)
    {
        foreach (Entity Personaje in allPersonaje) { Personaje.collisions.Remove(entity.gameObject); }
        foreach (Entity Materia in allMateria) { Materia.collisions.Remove(entity.gameObject); }
        foreach (Entity Disparo in allDisparo) { Disparo.collisions.Remove(entity.gameObject); }
        foreach (Entity TextoFeedback in allTextoFeedback) { TextoFeedback.collisions.Remove(entity.gameObject); }
        foreach (Entity GameMaster in allGameMaster) { GameMaster.collisions.Remove(entity.gameObject); }
        foreach (Entity System in allSystem) { System.collisions.Remove(entity.gameObject); }
    }

    /* INVOKE CALLBACKS */
    void InvokeCallback0()
    {
        NewEvent();
        foreach (TextoFeedback_Entity TextoFeedback in filteredTextoFeedback) { TextoFeedback.TiempoMostrarse = TextoFeedback.TiempoMostrarse - 1; }
        foreach (GameMaster_Entity GameMaster in filteredGameMaster) { GameMaster.TiempoCreacionMateria = GameMaster.TiempoCreacionMateria + Random.Range(0, 11); }
    }

}
